let input = [
    "noop",
    "addx 24",
    "addx -19",
    "noop",
    "noop",
    "noop",
    "addx 5",
    "noop",
    "addx 1",
    "addx 5",
    "addx -1",
    "addx 5",
    "addx 1",
    "addx 14",
    "addx -9",
    "addx -1",
    "addx 5",
    "noop",
    "addx 2",
    "addx -20",
    "addx 24",
    "addx -36",
    "addx -2",
    "noop",
    "addx 3",
    "addx 2",
    "addx 5",
    "addx 21",
    "addx -16",
    "noop",
    "addx 2",
    "addx 15",
    "addx -14",
    "addx 2",
    "addx 5",
    "addx 2",
    "addx -4",
    "addx 5",
    "addx -8",
    "addx 15",
    "addx 2",
    "addx 3",
    "addx -2",
    "addx -38",
    "noop",
    "addx 3",
    "addx 4",
    "noop",
    "addx 7",
    "noop",
    "noop",
    "addx -2",
    "addx 5",
    "addx -16",
    "addx 21",
    "noop",
    "addx -10",
    "addx 11",
    "addx 2",
    "addx 5",
    "addx 4",
    "noop",
    "noop",
    "addx -6",
    "addx 7",
    "noop",
    "addx 3",
    "addx -36",
    "noop",
    "addx 5",
    "noop",
    "addx 20",
    "addx -19",
    "addx 5",
    "addx 4",
    "noop",
    "addx -2",
    "addx 3",
    "noop",
    "addx 4",
    "noop",
    "addx -1",
    "addx 5",
    "addx 3",
    "addx -28",
    "addx 30",
    "noop",
    "addx 6",
    "noop",
    "noop",
    "addx 1",
    "addx -38",
    "addx 40",
    "addx -33",
    "addx 20",
    "addx -19",
    "addx 2",
    "noop",
    "addx 28",
    "addx -23",
    "addx 5",
    "addx 2",
    "addx 2",
    "addx 3",
    "addx -2",
    "addx 5",
    "addx 2",
    "addx -7",
    "addx 12",
    "addx -2",
    "noop",
    "addx 3",
    "addx -38",
    "noop",
    "addx 24",
    "addx -17",
    "noop",
    "addx 5",
    "noop",
    "noop",
    "addx 1",
    "addx -8",
    "addx 13",
    "noop",
    "noop",
    "addx 2",
    "addx 5",
    "addx 2",
    "addx 6",
    "addx -5",
    "addx 4",
    "noop",
    "addx 1",
    "addx 2",
    "noop",
    "addx 3",
    "noop",
    "noop",
]

input2 = [
    "addx 15",
    "addx -11",
    "addx 6",
    "addx -3",
    "addx 5",
    "addx -1",
    "addx -8",
    "addx 13",
    "addx 4",
    "noop",
    "addx -1",
    "addx 5",
    "addx -1",
    "addx 5",
    "addx -1",
    "addx 5",
    "addx -1",
    "addx 5",
    "addx -1",
    "addx -35",
    "addx 1",
    "addx 24",
    "addx -19",
    "addx 1",
    "addx 16",
    "addx -11",
    "noop",
    "noop",
    "addx 21",
    "addx -15",
    "noop",
    "noop",
    "addx -3",
    "addx 9",
    "addx 1",
    "addx -3",
    "addx 8",
    "addx 1",
    "addx 5",
    "noop",
    "noop",
    "noop",
    "noop",
    "noop",
    "addx -36",
    "noop",
    "addx 1",
    "addx 7",
    "noop",
    "noop",
    "noop",
    "addx 2",
    "addx 6",
    "noop",
    "noop",
    "noop",
    "noop",
    "noop",
    "addx 1",
    "noop",
    "noop",
    "addx 7",
    "addx 1",
    "noop",
    "addx -13",
    "addx 13",
    "addx 7",
    "noop",
    "addx 1",
    "addx -33",
    "noop",
    "noop",
    "noop",
    "addx 2",
    "noop",
    "noop",
    "noop",
    "addx 8",
    "noop",
    "addx -1",
    "addx 2",
    "addx 1",
    "noop",
    "addx 17",
    "addx -9",
    "addx 1",
    "addx 1",
    "addx -3",
    "addx 11",
    "noop",
    "noop",
    "addx 1",
    "noop",
    "addx 1",
    "noop",
    "noop",
    "addx -13",
    "addx -19",
    "addx 1",
    "addx 3",
    "addx 26",
    "addx -30",
    "addx 12",
    "addx -1",
    "addx 3",
    "addx 1",
    "noop",
    "noop",
    "noop",
    "addx -9",
    "addx 18",
    "addx 1",
    "addx 2",
    "noop",
    "noop",
    "addx 9",
    "noop",
    "noop",
    "noop",
    "addx -1",
    "addx 2",
    "addx -37",
    "addx 1",
    "addx 3",
    "noop",
    "addx 15",
    "addx -21",
    "addx 22",
    "addx -6",
    "addx 1",
    "noop",
    "addx 2",
    "addx 1",
    "noop",
    "addx -10",
    "noop",
    "noop",
    "addx 20",
    "addx 1",
    "addx 2",
    "addx 2",
    "addx -6",
    "addx -11",
    "noop",
    "noop",
    "noop",
]

input3 = [
    "noop",
    "addx 3",
    "addx -5",
]

let result = 0;

let register = {
    x: 1,
}
let ops = input.map(x => {
    let parts = x.split(" ");
    if(parts[0] === "addx") {
        return {type: "addx", amount: +parts[1], cycles: 2};
    }
    return {type: parts[0], amount: 0, cycles: 1};
})


let pc = 0;
let cycle = 1;
let strength = 0;
let line = "";
while(pc < ops.length) {
    //console.log(cycle, pc, ops[pc].type + " " + ops[pc].amount, register.x);
    if((cycle - 20) % 40 === 0) {
        //console.log("Cycle", cycle, register.x);
        strength += cycle * register.x;
    }
    const pixel = (cycle % 40) - 1;
    line += Math.abs(register.x - pixel) <= 1 ? "#" : ".";
    if(cycle % 40 === 0 && cycle) {
        console.log(line);
        line = "";
    }
    if(ops[pc].cycles-- == 1) {
        register.x += ops[pc].amount;
        pc++;
    }


    cycle++;
}

console.log(strength);